<?php
// $Id: camp_schedule.module 198 2010-08-05 21:14:27Z beltofte $

define('CAMP_SCHEDULE_NODE_CACHE_KEY', 'camp_schedule_nodes_type_session');
define('CAMP_SCHEDULE_NODE_CACHE_KEY_BOF', 'camp_schedule_nodes_type_bof');

/**
 * Implementation of hook_menu().
 */
function camp_schedule_menu() {
  $items = array();
  $items['admin/settings/camp-schedule'] = array(
    'title' => 'Camp Schedule Settings',
    'description' => 'Settings related to the camp schedule module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('camp_schedule_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('manage schedule'),
    'file' => 'camp_schedule.admin.inc',
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/content/camp-schedule'] = array(
    'title' => 'Camp Schedule',
    'description' => 'Arrange nodes into the camp schedule.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('camp_schedule_manage_form'),
    'access callback' => 'user_access',
    'access arguments' => array('manage schedule'),
    'file' => 'camp_schedule.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function camp_schedule_perm() {
  return array('manage schedule');
}

/**
 * Implementation of hook_theme().
 */
function camp_schedule_theme() {
  return array(
    'camp_schedule_manage_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'camp_schedule.admin.inc',
    )
  );
}

/**
 * Implementation of hook_help().
 */
function camp_schedule_help($path) {
  switch ($path) {
    case 'admin/settings/camp-schedule':
      return '<p>'. t('Use the form below to select the node types you\'d like to select from when making your schedule.') .'</p>';
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function camp_schedule_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  $type = variable_get('camp_schedule_node_type', 'session');

  // Clear the cache whenever a session node is being created,
  // updated or deleted.
  if ($node->type == $type && in_array($op, array('delete', 'delete revision', 'insert', 'update'))) {
    cache_clear_all(CAMP_SCHEDULE_NODE_CACHE_KEY, 'cache');
    cache_clear_all(CAMP_SCHEDULE_NODE_CACHE_KEY_BOF, 'cache');
    ctools_static_reset(CAMP_SCHEDULE_NODE_CACHE_KEY);
    ctools_static_reset(CAMP_SCHEDULE_NODE_CACHE_KEY_BOF);
  }
}


/**
 * Implementation of hook_views_api().
 */
function camp_schedule_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'camp_schedule'),
  );
}

/**
 * Load the current session nodes.
 */
function camp_schedule_load_nodes($reset = FALSE, $session_type = 'session') {
  if ($session_type == 'bof') {
    $cache_key = CAMP_SCHEDULE_NODE_CACHE_KEY_BOF;
  }
  else {
    $cache_key = CAMP_SCHEDULE_NODE_CACHE_KEY;
  }
  $sessions = &ctools_static($cache_key, array(), $reset);

  if (!empty($sessions)) {
    return $sessions;
  }

  // Return data from cache if available.
  $cache = ($reset) ? FALSE : cache_get($cache_key);
  if ($cache && !empty($cache->data)) {
    $sessions = $cache->data;
  }
  else {
    $type = variable_get('camp_schedule_node_type', 'session');

    $query = db_query("
      SELECT DISTINCT(n.nid) FROM {node} AS n
      INNER JOIN {content_type_%s} AS c ON (n.nid = c.nid AND c.field_session_type_value = '%s')
      WHERE n.type = '%s' AND n.status = 1
      ORDER BY c.field_session_day_value, c.field_session_room_value, c.field_session_time_value, n.title ASC
    ", $type, $session_type, $type);

    while ($nid = db_result($query)) {
      $node = node_load($nid);
      if ($node) {
        $sessions[] = $node;
      }
    }

    // Cache the loaded nodes until cleared.
    cache_set($cache_key, $sessions);
  }

  return $sessions;
}

